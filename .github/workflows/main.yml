name: GitHub Actions Project
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]

env:
  version: ${{ github.run_number }}
        
jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: echo "repo fetched"
      # - run: ls -a

  depchecktest:
    runs-on: ubuntu-latest
    name: depecheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build project with Maven
        run: mvn clean install
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BatBat'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 10
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  # Dockerfile_scan:
  #       needs: depchecktest
  #       runs-on: ubuntu-latest
  #       steps:
  #       - name: Checkout Repo
  #         uses: actions/checkout@v3
        
  #       - name: Set up Python 3.8
  #         uses: actions/setup-python@v4
  #         with:
  #           python-version: 3.8
          
  #       - name: Test with Checkov
  #         id: checkov
  #         uses: bridgecrewio/checkov-action@master
  #         with:
  #           directory: '.'
  #           framework: dockerfile 


  codacy-analysis-cli:
    needs: depchecktest
    name: Codacy Analysis CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master


        
  build:
    needs: codacy-analysis-cli
    name: Docker image build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: ls -a

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: VERSION=${{ env.version }}
          push: true
          tags: ${{ secrets.DOCKER_USER }}/batbat_project:${{ env.version }} , ${{ secrets.DOCKER_USER }}/batbat_project:latest

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
          
      - name: Write signing key to disk
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}    
          PUBKEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
        run: 'echo "$KEY" > cosign.key'
        shell: bash
            
      - name: Sign the published Docker image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --key cosign.key slavikb/batbat_project:$version -y
          cosign sign --key cosign.key slavikb/batbat_project:latest -y

      - name: Verify Image
        run: |
          cosign verify --key cosign.key slavikb/batbat_project:$version
          cosign verify --key cosign.key slavikb/batbat_project:latest      


  # verify-image:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@v3

  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@v3.5.0
          
  #     - name: Write signing key to disk
  #       env:
  #         KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
  #       run: 'echo "$KEY" > cosign.key'
  #       shell: bash

    
  #     - name: Verify Image
  #       run: |
  #         cosign verify --key cosign.key slavikb/batbat_project:$version
  #         cosign verify --key cosign.key slavikb/batbat_project:latest

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_USER }}
  #         aws-secret-access-key: ${{ secrets.AWS_PASS }}
  #         aws-region: eu-central-1

  #     - name: Terraform init and apply
  #       run: |
  #         cd terraform
  #         terraform init
  #         terraform fmt
  #         terraform destroy -auto-approve
  #         terraform apply -auto-approve
